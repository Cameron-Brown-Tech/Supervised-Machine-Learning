#Import Packages

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as plt
from sklearn.preprocessing import scale
from sklearn import metrics
import sklearn
from sklearn.linear_model import LogisticRegression

#import the data
data = pd.read_csv("C:\Spyder\salaries.csv")
#Clean data (drop columns with no full data)
data = data.dropna()
########finding job title of that in the data
job_title = data["title"].value_counts()[0:10]
job_title.columns = ["Job", "Count"]
#segmenting data to only that of software engineer
data = data[data['title'] == 'Software Engineer']




###### START  #####################



#Clean data for input into algorithm
df = data.drop(['timestamp','level','title','tag','otherdetails','cityid','dmaid','rowNumber','Masters_Degree','Doctorate_Degree','Highschool','Some_College','Race_Asian','Race_White','Race_Two_Or_More','Race_Black','Race_Hispanic','Bachelors_Degree','yearsatcompany','basesalary','stockgrantvalue','bonus','yearsofexperience','location'],axis=1)
df["company"]= df["company"].map({"Amazon":1,"Microsoft":2,"Google":3,"Facebook":4,"Apple":4,"Oracle":5,"Cisco":6,"IBM":7,"Salesforce":8,"Capital One":9,"VMware":10,"Bloomberg":11,"JPMorgan Chase":12,"Goldman Sachs":13,"LinkedIn":14})
df['Race']= df['Race'].map({"Asian":101,"White":102,"Hispanic":103,"Two Or More":104,"Black":105})
df['Education']= df["Education"].map({"Bachelor's Degree":201,"Master's Degree":202, "PhD":203,"Some College":204,"Highschool":205})
df['gender']=df['gender'].map({"Male":1,"Female":2,"Other":3})
df['totalyearlycompensation']= df['totalyearlycompensation'].value_counts(bins= 30)
df = df.dropna()
    
#data['company'].value_counts()
#abt.iloc[:15,]
#df.groupby('company').value_counts()
#7]:

#df['gender'].unique()
#abt= pd.get_dummies(df)


y = df['gender']
x = df.drop('gender', axis=1)
x = scale(x)



x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(x, y, test_size = 0.30)
#x_train =x_train.reshape(-1,1)
#y_train = y_train.reshape(-1,1)
#x_test = x_test.reshape(-1,1)

model = LogisticRegression()
model.fit(x_train,y_train)
#print(model)
y_pred = model.predict(x_test)
print(metrics.classification_report(y_test,y_pred))
print(metrics.confusion_matrix(y_test,y_pred))
